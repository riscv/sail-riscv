#pragma once

#include "sail_riscv_model.h"

// This type name is generated by Sail for the tuple `(bits(5), bits(16))`.
// If you squint you can see that it is "tuple_(%bv5, %bv16)" with a
// strange encoding called Z-encoding.
using bv5_bv16 = model::ztuple_z8z5bv5zCz0z5bv16z9;
using bv5_bv32 = model::ztuple_z8z5bv5zCz0z5bv32z9;
using bv5_bv64 = model::ztuple_z8z5bv5zCz0z5bv64z9;
using bv5_bool = model::ztuple_z8z5bv5zCz0z5boolz9;

bv5_bv16 softfloat_f16add(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv16 softfloat_f16sub(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv16 softfloat_f16mul(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv16 softfloat_f16div(uint64_t rm, uint64_t v1, uint64_t v2);

bv5_bv32 softfloat_f32add(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv32 softfloat_f32sub(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv32 softfloat_f32mul(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv32 softfloat_f32div(uint64_t rm, uint64_t v1, uint64_t v2);

bv5_bv64 softfloat_f64add(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv64 softfloat_f64sub(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv64 softfloat_f64mul(uint64_t rm, uint64_t v1, uint64_t v2);
bv5_bv64 softfloat_f64div(uint64_t rm, uint64_t v1, uint64_t v2);

bv5_bv16 softfloat_f16muladd(uint64_t rm, uint64_t v1, uint64_t v2,
                             uint64_t v3);
bv5_bv32 softfloat_f32muladd(uint64_t rm, uint64_t v1, uint64_t v2,
                             uint64_t v3);
bv5_bv64 softfloat_f64muladd(uint64_t rm, uint64_t v1, uint64_t v2,
                             uint64_t v3);

bv5_bv16 softfloat_f16sqrt(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_f32sqrt(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f64sqrt(uint64_t rm, uint64_t v);

bv5_bv32 softfloat_f16toi32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_f16toui32(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f16toi64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f16toui64(uint64_t rm, uint64_t v);

bv5_bv32 softfloat_f32toi32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_f32toui32(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f32toi64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f32toui64(uint64_t rm, uint64_t v);

bv5_bv32 softfloat_f64toi32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_f64toui32(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f64toi64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f64toui64(uint64_t rm, uint64_t v);

bv5_bv16 softfloat_i32tof16(uint64_t rm, uint64_t v);
bv5_bv16 softfloat_ui32tof16(uint64_t rm, uint64_t v);
bv5_bv16 softfloat_i64tof16(uint64_t rm, uint64_t v);
bv5_bv16 softfloat_ui64tof16(uint64_t rm, uint64_t v);

bv5_bv32 softfloat_i32tof32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_ui32tof32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_i64tof32(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_ui64tof32(uint64_t rm, uint64_t v);

bv5_bv64 softfloat_i32tof64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_ui32tof64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_i64tof64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_ui64tof64(uint64_t rm, uint64_t v);

bv5_bv32 softfloat_f16tof32(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f16tof64(uint64_t rm, uint64_t v);
bv5_bv64 softfloat_f32tof64(uint64_t rm, uint64_t v);

bv5_bv16 softfloat_f32tof16(uint64_t rm, uint64_t v);
bv5_bv16 softfloat_f64tof16(uint64_t rm, uint64_t v);
bv5_bv32 softfloat_f64tof32(uint64_t rm, uint64_t v);

bv5_bv16 softfloat_f32tobf16(uint64_t rm, uint64_t v);

bv5_bool softfloat_f16lt(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f16lt_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f16le(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f16le_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f16eq(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f32lt(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f32lt_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f32le(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f32le_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f32eq(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f64lt(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f64lt_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f64le(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f64le_quiet(uint64_t v1, uint64_t v2);
bv5_bool softfloat_f64eq(uint64_t v1, uint64_t v2);

bv5_bv16 softfloat_f16roundToInt(uint64_t rm, uint64_t v, bool exact);
bv5_bv32 softfloat_f32roundToInt(uint64_t rm, uint64_t v, bool exact);
bv5_bv64 softfloat_f64roundToInt(uint64_t rm, uint64_t v, bool exact);
