variable TERMINATION_FILE = false

core {
  files
    core/prelude.sail,
    core/errors.sail,
    core/xlen.sail,
    core/flen.sail,
    core/vlen.sail,
    core/prelude_mem_addrtype.sail,
    core/prelude_mem_metadata.sail,
    core/prelude_mem.sail,
    core/arithmetic.sail,
    core/rvfi_dii.sail,
    core/rvfi_dii_v1.sail,
    core/rvfi_dii_v2.sail,
    core/extensions.sail,
    core/types_common.sail,
    core/types_ext.sail,
    core/types.sail,
    core/vmem_types.sail,
    core/vext_types.sail,
    core/csr_begin.sail,
    core/callbacks.sail,
    core/reg_type.sail,
    core/regs.sail,
    core/pc_access.sail,
    core/sys_regs.sail,
    core/ext_regs.sail,
    core/addr_checks_common.sail,
    core/addr_checks.sail,
    core/misa_ext.sail,
    core/softfloat_interface.sail,
}

exceptions {
  requires core

  files
    exceptions/sys_exceptions.sail,
    exceptions/sync_exception.sail,
}

pmp {
  requires core

  files
    pmp/pmp_regs.sail,
    pmp/pmp_control.sail,
}

riscv {
  requires core, exceptions, pmp, V_core, Smcntrpmf

  files
    sys/sys_reservation.sail,
    sys/sys_control.sail,
    sys/platform.sail,
    sys/mem.sail,
    sys/inst_retire.sail,
    sys/vmem_pte.sail,
    sys/vmem_ptw.sail,
    sys/vmem_tlb.sail,
    sys/vmem.sail,
    sys/vmem_utils.sail,
    sys/insts_begin.sail,
}

extensions {
  requires core

  I {
    I_types {
      before riscv
      files extensions/I/base_types.sail
    }
    I_insts {
      requires exceptions, riscv, I_types

      files
        extensions/I/base_insts.sail,
        extensions/I/reserved_fence_insts.sail,
        extensions/I/jalr_seq.sail
    }
  }

  A {
    A_types {
      before riscv
      files extensions/A/aext_types.sail
    }
    Zaamo {
      requires riscv, A_types
      files extensions/A/zaamo_insts.sail
    }
    Zalrsc {
      requires riscv, A_types
      files extensions/A/zalrsc_insts.sail
    }
  }

  M {
    M_types {
      before riscv
      files extensions/M/mext_types.sail
    }
    M_insts {
      requires riscv, I, M_types
      files extensions/M/mext_insts.sail
    }
  }

  // RISC-V Bit manipulation extensions
  B {
    B_types {
      before riscv
      files extensions/B/bext_types.sail
    }

    B_insts {
      requires riscv, B_types

      Zba {
        files extensions/B/zba_insts.sail
      }
      Zbb {
        files extensions/B/zbb_insts.sail
      }
      Zbc {
        files extensions/B/zbc_insts.sail
      }
      Zbs {
        files extensions/B/zbs_insts.sail
      }
    }
  }

  // Compressed instructions
  C {
    Zca {
      requires exceptions, riscv, I
      files extensions/C/zca_insts.sail
    }
    Zcb {
      requires exceptions, riscv, I, B, M
      files extensions/C/zcb_insts.sail
    }
  }

  // Hypervisor
  H {
    files
      extensions/H/hext_insts.sail
  }

  // Floating point (F and D extensions)
  FD {
    FD_core {
      before riscv
      files
        extensions/FD/freg_type.sail,
        extensions/FD/fdext_regs.sail,
        extensions/FD/fdext_control.sail,
    }

    FD_instructions {
      requires riscv, I, FD_core
      files
        extensions/FD/fext_insts.sail,
        extensions/FD/zcf_insts.sail,
        extensions/FD/dext_insts.sail,
        extensions/FD/zcd_insts.sail,
        extensions/FD/zfh_insts.sail,
        extensions/FD/zfa_insts.sail,
    }
  }

  // RISC-V vector extension
  V {
    V_core {
      requires FD_core
      files
        extensions/V/vreg_type.sail,
        extensions/V/vext_regs.sail,
        extensions/V/vext_control.sail,
    }

    V_instructions {
      requires riscv, I, FD, V_core
      files
        extensions/V/vext_utils_insts.sail,
        extensions/V/vext_fp_utils_insts.sail,
        extensions/V/vext_vset_insts.sail,
        extensions/V/vext_arith_insts.sail,
        extensions/V/vext_fp_insts.sail,
        extensions/V/vext_mem_insts.sail,
        extensions/V/vext_mask_insts.sail,
        extensions/V/vext_vm_insts.sail,
        extensions/V/vext_fp_vm_insts.sail,
        extensions/V/vext_red_insts.sail,
        extensions/V/vext_fp_red_insts.sail,
     }
  }

  // RISC-V Cryptography Extension
  K {
    K_core {
      files extensions/K/types_kext.sail
    }
    Zkn {
      requires riscv, K_core
      files extensions/K/zkn_insts.sail
    }
    Zks {
      requires riscv, K_core
      files extensions/K/zks_insts.sail
    }
    Zkr {
      requires riscv, K_core
      files extensions/K/zkr_control.sail
    }
    Zbkb {
      requires riscv, B_types
      files extensions/K/zbkb_insts.sail
    }
    Zbkx {
      requires riscv
      files extensions/K/zbkx_insts.sail
    }
  }

  vector_crypto {
    Zvk_core {
      requires V_core, K_core
      before riscv
      files extensions/vector_crypto/zvk_utils.sail
    }

    Zvbb {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvbb_insts.sail
    }
    Zvbc {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvbc_insts.sail
    }
    Zvkg {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvkg_insts.sail
    }
    Zvkned {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvkned_insts.sail
    }
    Zvksed {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvksed_insts.sail
    }
    Zvknhab {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvknhab_insts.sail
    }
    Zvksh {
      requires riscv, V, K, Zvk_core
      files extensions/vector_crypto/zvksh_insts.sail
    }
  }

  // Control and Status Register (CSR) Instructions
  Zicsr {
    Zicsr_types {
      before riscv
      files extensions/Zicsr/zicsr_types.sail
    }
    Zicsr_insts {
      requires riscv, exceptions, pmp, V_core, Zicsr_types
      files extensions/Zicsr/zicsr_insts.sail
    }
  }

  Svinval {
    requires riscv, I
    files extensions/Svinval/svinval_insts.sail
  }

  Zihpm {
    files extensions/Zihpm/zihpm.sail
  }

  Smcntrpmf {
    files extensions/Smcntrpmf/smcntrpmf.sail
  }

  Sscofpmf {
    requires Zihpm
    files extensions/Sscofpmf/sscofpmf.sail
  }

  Sstc {
    requires riscv
    files extensions/Sstc/sstc.sail
  }

  Zawrs {
    Zawrs_types {
      before riscv
      files extensions/Zawrs/zawrs_types.sail
    }
    Zawrs_insts {
      requires riscv, Zawrs_types
      files extensions/Zawrs/zawrs_insts.sail
    }
  }

  Zicond {
    Zicond_types {
      before riscv
      files extensions/Zicond/zicond_types.sail
    }
    Zicond_insts {
      requires riscv, Zicond_types
      files extensions/Zicond/zicond_insts.sail
    }
  }

  Zicntr {
    files extensions/Zicntr/zicntr_control.sail
  }

  Zicbom {
    Zicbom_types {
      before riscv
      files extensions/Zicbom/zicbom_types.sail
    }
    Zicbom_insts {
      requires riscv, Zicbom_types
      files extensions/Zicbom/zicbom_insts.sail
    }
  }

  Zicbop {
    Zicbop_types {
      before riscv
      files extensions/Zicbop/zicbop_types.sail
    }
    Zicbop_insts {
      // PREFETCH.{I,R,W} instructions override ORI hints (rd=0)
      before I_insts
      requires riscv, Zicbop_types
      files extensions/Zicbop/zicbop_insts.sail
    }
  }

  Zicboz {
    requires riscv
    files extensions/Zicboz/zicboz_insts.sail
  }

  Zifenci {
    requires riscv
    files extensions/Zifenci/zifencei_insts.sail
  }

  Zihintntl {
    Zihintntl_types {
      before riscv // needs to appear before definition of `instruction`
      files extensions/Zihintntl/zihintntl_types.sail
    }
    Zihintntl_insts {
      requires riscv, Zihintntl_types
      before I_insts, Zca // NTL instructions override ADD, C.NTL overrides C.ADD
      files extensions/Zihintntl/zihintntl_insts.sail
    }
  }

  Zihintpause {
    requires riscv
    before I_insts // PAUSE overrides a FENCE
    files extensions/Zihintpause/zihintpause_insts.sail
  }

  bfloat16 {
    bfloat16_core {
      requires riscv, FD
      files extensions/bfloat16/zfbfmin_utils.sail
    }
    Zfbfmin {
      requires riscv, FD, bfloat16_core
      files extensions/bfloat16/zfbfmin_insts.sail
    }
  }

}

// May-be-operations (MOPS) defined after extensions so they can be
// overridden by earlier extensions
mops {
  after extensions
  requires core, riscv

  Zimop {
    files mops/Zimop/zimop_insts.sail
  }

  Zcmop {
    files mops/Zcmop/zcmop_insts.sail
  }
}

postlude {
  after extensions, mops

  requires core, riscv, exceptions, Smcntrpmf, pmp

  files
    postlude/insts_end.sail,
    postlude/csr_end.sail,
    postlude/step_common.sail,
    postlude/step_ext.sail,
    postlude/decode_ext.sail,
    postlude/fetch_rvfi.sail,
    postlude/fetch.sail,
    postlude/step.sail,
    postlude/validate_config.sail,
    postlude/device_tree.sail,
    postlude/model.sail
}

termination {
  after postlude
  requires core, riscv, extensions

  files
    if $TERMINATION_FILE then
      termination.sail
    else []
}

unit_tests {
  after termination
  requires core, riscv, exceptions, postlude

  files
    unit_tests/test_mstatus.sail,
}

main {
  // Currently this must be the very last thing due to limitations
  // in the Sail compiler's Lean backend.
  after unit_tests
  requires core, riscv, exceptions, postlude

  files main.sail
}
