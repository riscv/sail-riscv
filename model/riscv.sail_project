variable TERMINATION_FILE = false

riscv_core {
  files
    prelude.sail,
    riscv_errors.sail,
    riscv_xlen.sail,
    riscv_flen.sail,
    riscv_vlen.sail,
    prelude_mem_addrtype.sail,
    prelude_mem_metadata.sail,
    prelude_mem.sail,
    arithmetic.sail,
    rvfi_dii.sail,
    rvfi_dii_v1.sail,
    rvfi_dii_v2.sail,
    riscv_extensions.sail,
    riscv_types_common.sail,
    riscv_types_ext.sail,
    riscv_types.sail,
    riscv_vmem_types.sail,
    riscv_csr_begin.sail,
    riscv_callbacks.sail,
    riscv_reg_type.sail,
    riscv_regs.sail,
    riscv_pc_access.sail,
    riscv_sys_regs.sail,
    riscv_ext_regs.sail,
    riscv_addr_checks_common.sail,
    riscv_addr_checks.sail,
    riscv_misa_ext.sail,
    riscv_softfloat_interface.sail,
}

riscv_exceptions {
  requires riscv_core

  files
    riscv_sys_exceptions.sail,
    riscv_sync_exception.sail,
}

pmp {
  requires riscv_core

  files
    riscv_pmp_regs.sail,
    riscv_pmp_control.sail,
}

riscv {
  requires riscv_core, riscv_exceptions, pmp, V_core, Smcntrpmf

  files
    riscv_sys_reservation.sail,
    riscv_sys_control.sail,
    riscv_platform.sail,
    riscv_mem.sail,
    riscv_inst_retire.sail,
    riscv_vmem_pte.sail,
    riscv_vmem_ptw.sail,
    riscv_vmem_tlb.sail,
    riscv_vmem.sail,
    riscv_vmem_utils.sail,
    riscv_insts_begin.sail,
}

extensions {
  requires riscv_core

  I {
    requires riscv_exceptions, riscv

    files
      riscv_insts_base.sail,
      riscv_insts_reserved_fence.sail,
      riscv_jalr_seq.sail
  }

  A {
    requires riscv_exceptions, riscv, I
    Zaamo {
      files riscv_insts_zaamo.sail
    }
    Zalrsc {
      requires Zaamo
      files riscv_insts_zalrsc.sail
    }
  }

  M {
    requires riscv, I
    files riscv_insts_mext.sail
  }

  // RISC-V Bit manipulation extensions
  B {
    requires riscv

    Zba {
      files riscv_insts_zba.sail
    }
    Zbb {
      files riscv_insts_zbb.sail
    }
    Zbc {
      files riscv_insts_zbc.sail
    }
    Zbs {
      files riscv_insts_zbs.sail
    }
  }

  // Compressed instructions
  C {
    Zca {
      requires riscv_exceptions, riscv, I
      files riscv_insts_zca.sail
    }
    Zcb {
      requires riscv_exceptions, riscv, I, B, M
      files riscv_insts_zcb.sail
    }
  }

  // Hypervisor
  H {
    files
      riscv_insts_hext.sail
  }

  // Floating point (F and D extensions)
  FD {
    FD_core {
      before riscv
      files
        riscv_freg_type.sail,
        riscv_fdext_regs.sail,
        riscv_fdext_control.sail,
    }

    FD_instructions {
      requires riscv, I, FD_core
      files
        riscv_insts_fext.sail,
        riscv_insts_zcf.sail,
        riscv_insts_dext.sail,
        riscv_insts_zcd.sail,
        riscv_insts_zfh.sail,
        riscv_insts_zfa.sail,
    }
  }

  // RISC-V vector extension
  V {
    V_core {
      requires FD_core
      files
        riscv_vreg_type.sail,
        riscv_vext_regs.sail,
        riscv_vext_control.sail,
    }

    V_instructions {
      requires riscv, I, FD, V_core
      files
        riscv_insts_vext_utils.sail,
        riscv_insts_vext_fp_utils.sail,
        riscv_insts_vext_vset.sail,
        riscv_insts_vext_arith.sail,
        riscv_insts_vext_fp.sail,
        riscv_insts_vext_mem.sail,
        riscv_insts_vext_mask.sail,
        riscv_insts_vext_vm.sail,
        riscv_insts_vext_fp_vm.sail,
        riscv_insts_vext_red.sail,
        riscv_insts_vext_fp_red.sail,
     }
  }

  // RISC-V Cryptography Extension
  K {
    K_core {
      files riscv_types_kext.sail
    }
    Zkn {
      requires riscv, K_core
      files riscv_insts_zkn.sail
    }
    Zks {
      requires riscv, K_core
      files riscv_insts_zks.sail
    }
    Zkr {
      requires riscv, K_core
      files riscv_zkr_control.sail
    }
    Zbkb {
      requires riscv
      files riscv_insts_zbkb.sail
    }
    Zbkx {
      requires riscv
      files riscv_insts_zbkx.sail
    }
  }

  vector_crypto {
    Zvk_core {
      requires V_core, K_core
      before riscv
      files riscv_zvk_utils.sail
    }

    Zvbb {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvbb.sail
    }
    Zvbc {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvbc.sail
    }
    Zvkg {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvkg.sail
    }
    Zvkned {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvkned.sail
    }
    Zvksed {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvksed.sail
    }
    Zvknhab {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvknhab.sail
    }
    Zvksh {
      requires riscv, V, K, Zvk_core
      files riscv_insts_zvksh.sail
    }
  }

  // Control and Status Register (CSR) Instructions
  Zicsr {
    requires riscv, riscv_exceptions, pmp, V_core
    files riscv_insts_zicsr.sail
  }

  Svinval {
    requires riscv, I
    files riscv_insts_svinval.sail
  }

  Zihpm {
    files riscv_zihpm.sail
  }

  Smcntrpmf {
    files riscv_smcntrpmf.sail
  }

  Sscofpmf {
    requires Zihpm
    files riscv_sscofpmf.sail
  }

  Sstc {
    requires riscv
    files riscv_sstc.sail
  }

  Zawrs {
    requires riscv
    files riscv_insts_zawrs.sail
  }

  Zicond {
    requires riscv
    files riscv_insts_zicond.sail
  }

  Zicntr {
    files riscv_zicntr_control.sail
  }

  Zicbom {
    requires riscv
    files riscv_insts_zicbom.sail
  }

  Zicboz {
    requires riscv
    files riscv_insts_zicboz.sail
  }

  Zifenci {
    requires riscv
    files riscv_insts_zifencei.sail
  }
}

// May-be-operations (MOPS) defined after extensions so they can be
// overriden by earlier extensions
mops {
  after extensions
  requires riscv_core, riscv

  Zimop {
    files riscv_insts_zimop.sail
  }

  Zcmop {
    files riscv_insts_zcmop.sail
  }
}

riscv_postlude {
  after extensions, mops

  requires riscv_core, riscv, riscv_exceptions, Smcntrpmf, pmp

  files
    riscv_insts_end.sail,
    riscv_csr_end.sail,
    riscv_step_common.sail,
    riscv_step_ext.sail,
    riscv_decode_ext.sail,
    riscv_fetch_rvfi.sail,
    riscv_fetch.sail,
    riscv_step.sail,
    riscv_validate_config.sail,
    riscv_device_tree.sail,
    riscv_model.sail
}

riscv_termination {
  after riscv_postlude
  requires riscv_core, riscv, extensions

  files
    if $TERMINATION_FILE then
      riscv_termination.sail
    else []
}

unit_tests {
  after riscv_termination
  requires riscv_core, riscv, riscv_exceptions, riscv_postlude

  files
    unit_tests/test_mstatus.sail,
}

riscv_main {
  // Currently this must be the very last thing due to limitations
  // in the Sail compiler's Lean backend.
  after unit_tests
  requires riscv_core, riscv, riscv_exceptions, riscv_postlude

  files main.sail
}
