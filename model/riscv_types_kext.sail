/*
 * This file contains types, mappings and functions used across the
 * cryptography extension instructions.
 *
 * This file must be included in the model build whatever the value of XLEN.
 */

/*
 * Cryptography extension types.
 * ----------------------------------------------------------------------
 */

/* Byte shift parameter for scalar 32-bit aes instructions */
type aes_bs = bits(2)

/* Scalar AES round instruction operations. Used for 32,64-bit versions */
enum aes_op = {
  ENCS, ENCSM, DECS, DECSM
}

/* Scalar SHA256 instruction operations. Used for 32,64-bit versions. */
enum sha256_op = {
  OP_SHA256_SIG0,
  OP_SHA256_SIG1,
  OP_SHA256_SUM0,
  OP_SHA256_SUM1
}

/* Scalar SHA512 RV64 instruction operations */
enum sha512_rv64_op = {
  OP_SHA512_SIG0,
  OP_SHA512_SIG1,
  OP_SHA512_SUM0,
  OP_SHA512_SUM1
}

/* Scalar SHA512 RV32 instruction operations.*/
enum sha512_rv32_op = {
  OP_SHA512_SIG0L, OP_SHA512_SIG0H,
  OP_SHA512_SIG1L, OP_SHA512_SIG1H,
  OP_SHA512_SUM0R, OP_SHA512_SUM1R
}

/* Scalar SM3 instruction operations. Used for 32,64-bit versions. */
enum sm3_op = {
  P0, P1
}

/* Scalar SM4 instruction operations. Used for 32,64-bit versions. */
enum sm4_op = {
    KS, ED
}

/* Map scalar instruction round function ops to whether they enc or dec? */
mapping aes_op_fwd : aes_op <-> bool = {
  ENCSM   <-> true,
  ENCS    <-> true,
  DECSM   <-> false,
  DECS    <-> false
}

/* Map scalar instruction round function ops to whether they perform mix? */
mapping aes_op_does_mix : aes_op <-> bool = {
  ENCSM   <-> true,
  ENCS    <-> false,
  DECSM   <-> true,
  DECS    <-> false 
}

/* 
 * Cryptography extension shared / utility functions
 * ----------------------------------------------------------------------
 */

val ror32 : (bits(32), int) -> bits(32)
function ror32(x, y) = {
  (x>>to_bits(5,y)) | (x<<to_bits(5,32-y))
}

val ror64 : (bits(64), int) -> bits(64)
function ror64(x, y) = {
  (x>>to_bits(6,y)) | (x<<to_bits(6,64-y))
}

val rol32 : (bits(32), int) -> bits(32)
function rol32(x, y) = {
  (x<<to_bits(5,y)) | (x>>to_bits(5,32-y))
}

/* Auxiliary function for performing GF multiplicaiton */
val xt2 : bits(8) -> bits(8)
function xt2(x) = {
  (x << 1) ^ ( match (bit_to_bool(x[7]) ) {
    false => 0x00,
    true  => 0x1B
  })
}

val xt3 : bits(8) -> bits(8)
function xt3(x) = {
  x ^ xt2(x)
}

/* Multiply 8-bit field element by 4-bit value for AES MixCols step */
val gfmul : (bits(8), bits(4)) -> bits(8)
function gfmul( x, y) = {
  (if bit_to_bool(y[0]) then             x    else 0x00) ^
  (if bit_to_bool(y[1]) then xt2(        x)   else 0x00) ^
  (if bit_to_bool(y[2]) then xt2(xt2(    x))  else 0x00) ^
  (if bit_to_bool(y[3]) then xt2(xt2(xt2(x))) else 0x00)
}

/* 8-bit to 32-bit partial AES Mix Colum - forwards */
val aes_mixcolumn_byte_fwd : bits(8) -> bits(32)
function aes_mixcolumn_byte_fwd(so) = {
  gfmul(so, 0x3) @ so @ so @ gfmul(so, 0x2)
}

/* 8-bit to 32-bit partial AES Mix Colum - inverse*/
val aes_mixcolumn_byte_inv : bits(8) -> bits(32)
function aes_mixcolumn_byte_inv(so) = {
  gfmul(so, 0xb) @ gfmul(so, 0xd) @ gfmul(so, 0x9) @ gfmul(so, 0xe)
}

/* 32-bit to 32-bit AES forward MixColumn */
val aes_mixcolumn_fwd : bits(32) -> bits(32)
function aes_mixcolumn_fwd(x) = {
  let s0 : bits (8) = x[ 7.. 0];
  let s1 : bits (8) = x[15.. 8];
  let s2 : bits (8) = x[23..16];
  let s3 : bits (8) = x[31..24];
  let b0 : bits (8) = xt2(s0) ^ xt3(s1) ^    (s2) ^    (s3);
  let b1 : bits (8) =    (s0) ^ xt2(s1) ^ xt3(s2) ^    (s3);
  let b2 : bits (8) =    (s0) ^    (s1) ^ xt2(s2) ^ xt3(s3);
  let b3 : bits (8) = xt3(s0) ^    (s1) ^    (s2) ^ xt2(s3);
  b3 @ b2 @ b1 @ b0 /* Return value */
}

/* 32-bit to 32-bit AES inverse MixColumn */
val aes_mixcolumn_inv : bits(32) -> bits(32)
function aes_mixcolumn_inv(x) = {
  let s0 : bits (8) = x[ 7.. 0];
  let s1 : bits (8) = x[15.. 8];
  let s2 : bits (8) = x[23..16];
  let s3 : bits (8) = x[31..24];
  let b0 : bits (8) = gfmul(s0,0xE)^gfmul(s1,0xB)^gfmul(s2,0xD)^gfmul(s3,0x9);
  let b1 : bits (8) = gfmul(s0,0x9)^gfmul(s1,0xE)^gfmul(s2,0xB)^gfmul(s3,0xD);
  let b2 : bits (8) = gfmul(s0,0xD)^gfmul(s1,0x9)^gfmul(s2,0xE)^gfmul(s3,0xB);
  let b3 : bits (8) = gfmul(s0,0xB)^gfmul(s1,0xD)^gfmul(s2,0x9)^gfmul(s3,0xE);
  b3 @ b2 @ b1 @ b0 /* Return value */
}

val aes_rnum_to_rcon : bits(4) -> bits(32)
function aes_rnum_to_rcon(r) = {
  match r {
    0x0 => 0x00000001,
    0x1 => 0x00000002,
    0x2 => 0x00000004,
    0x3 => 0x00000008,
    0x4 => 0x00000010,
    0x5 => 0x00000020,
    0x6 => 0x00000040,
    0x7 => 0x00000080,
    0x8 => 0x0000001b,
    0x9 => 0x00000036,
    0xA => 0x00000000,
    0xB => 0x00000000,
    0xC => 0x00000000,
    0xD => 0x00000000,
    0xE => 0x00000000,
    0xF => 0x00000000
  }
}

/* SM4 SBox - only one sbox for forwards and inverse */
let sm4_sbox_table : list(bits(8)) = [|
0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28,
0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44,
0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98,
0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9,
0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47,
0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85,
0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F,
0x4B, 0x70, 0x56, 0x9D, 0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2,
0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F,
0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF,
0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15,
0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30,
0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0,
0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD,
0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51, 0x8D, 0x1B, 0xAF,
0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8,
0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8,
0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9,
0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D,
0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
|]

/* Lookup function - takes an index and a list, and retrieves the
 * x'th element of that list.
 */
val sbox_lookup : (bits(8), list(bits(8))) -> bits(8)
function sbox_lookup(x, table) = {
  match (x, table) {
    (0x00, t0::tn) => t0,
    ( y  , t0::tn) => sbox_lookup(x - 0x01,tn)
  }
}

/* Easy function to perform a forward AES SBox operation on 1 byte. */
val aes_sbox_fwd : bits(8) -> bits(8)
function aes_sbox_fwd(x) = {
  match(x) {
    0x00 => 0x63, 0x01 => 0x7c, 0x02 => 0x77, 0x03 => 0x7b, 0x04 => 0xf2,
    0x05 => 0x6b, 0x06 => 0x6f, 0x07 => 0xc5, 0x08 => 0x30, 0x09 => 0x01,
    0x0a => 0x67, 0x0b => 0x2b, 0x0c => 0xfe, 0x0d => 0xd7, 0x0e => 0xab,
    0x0f => 0x76, 0x10 => 0xca, 0x11 => 0x82, 0x12 => 0xc9, 0x13 => 0x7d,
    0x14 => 0xfa, 0x15 => 0x59, 0x16 => 0x47, 0x17 => 0xf0, 0x18 => 0xad,
    0x19 => 0xd4, 0x1a => 0xa2, 0x1b => 0xaf, 0x1c => 0x9c, 0x1d => 0xa4,
    0x1e => 0x72, 0x1f => 0xc0, 0x20 => 0xb7, 0x21 => 0xfd, 0x22 => 0x93,
    0x23 => 0x26, 0x24 => 0x36, 0x25 => 0x3f, 0x26 => 0xf7, 0x27 => 0xcc,
    0x28 => 0x34, 0x29 => 0xa5, 0x2a => 0xe5, 0x2b => 0xf1, 0x2c => 0x71,
    0x2d => 0xd8, 0x2e => 0x31, 0x2f => 0x15, 0x30 => 0x04, 0x31 => 0xc7,
    0x32 => 0x23, 0x33 => 0xc3, 0x34 => 0x18, 0x35 => 0x96, 0x36 => 0x05,
    0x37 => 0x9a, 0x38 => 0x07, 0x39 => 0x12, 0x3a => 0x80, 0x3b => 0xe2,
    0x3c => 0xeb, 0x3d => 0x27, 0x3e => 0xb2, 0x3f => 0x75, 0x40 => 0x09,
    0x41 => 0x83, 0x42 => 0x2c, 0x43 => 0x1a, 0x44 => 0x1b, 0x45 => 0x6e,
    0x46 => 0x5a, 0x47 => 0xa0, 0x48 => 0x52, 0x49 => 0x3b, 0x4a => 0xd6,
    0x4b => 0xb3, 0x4c => 0x29, 0x4d => 0xe3, 0x4e => 0x2f, 0x4f => 0x84,
    0x50 => 0x53, 0x51 => 0xd1, 0x52 => 0x00, 0x53 => 0xed, 0x54 => 0x20,
    0x55 => 0xfc, 0x56 => 0xb1, 0x57 => 0x5b, 0x58 => 0x6a, 0x59 => 0xcb,
    0x5a => 0xbe, 0x5b => 0x39, 0x5c => 0x4a, 0x5d => 0x4c, 0x5e => 0x58,
    0x5f => 0xcf, 0x60 => 0xd0, 0x61 => 0xef, 0x62 => 0xaa, 0x63 => 0xfb,
    0x64 => 0x43, 0x65 => 0x4d, 0x66 => 0x33, 0x67 => 0x85, 0x68 => 0x45,
    0x69 => 0xf9, 0x6a => 0x02, 0x6b => 0x7f, 0x6c => 0x50, 0x6d => 0x3c,
    0x6e => 0x9f, 0x6f => 0xa8, 0x70 => 0x51, 0x71 => 0xa3, 0x72 => 0x40,
    0x73 => 0x8f, 0x74 => 0x92, 0x75 => 0x9d, 0x76 => 0x38, 0x77 => 0xf5,
    0x78 => 0xbc, 0x79 => 0xb6, 0x7a => 0xda, 0x7b => 0x21, 0x7c => 0x10,
    0x7d => 0xff, 0x7e => 0xf3, 0x7f => 0xd2, 0x80 => 0xcd, 0x81 => 0x0c,
    0x82 => 0x13, 0x83 => 0xec, 0x84 => 0x5f, 0x85 => 0x97, 0x86 => 0x44,
    0x87 => 0x17, 0x88 => 0xc4, 0x89 => 0xa7, 0x8a => 0x7e, 0x8b => 0x3d,
    0x8c => 0x64, 0x8d => 0x5d, 0x8e => 0x19, 0x8f => 0x73, 0x90 => 0x60,
    0x91 => 0x81, 0x92 => 0x4f, 0x93 => 0xdc, 0x94 => 0x22, 0x95 => 0x2a,
    0x96 => 0x90, 0x97 => 0x88, 0x98 => 0x46, 0x99 => 0xee, 0x9a => 0xb8,
    0x9b => 0x14, 0x9c => 0xde, 0x9d => 0x5e, 0x9e => 0x0b, 0x9f => 0xdb,
    0xa0 => 0xe0, 0xa1 => 0x32, 0xa2 => 0x3a, 0xa3 => 0x0a, 0xa4 => 0x49,
    0xa5 => 0x06, 0xa6 => 0x24, 0xa7 => 0x5c, 0xa8 => 0xc2, 0xa9 => 0xd3,
    0xaa => 0xac, 0xab => 0x62, 0xac => 0x91, 0xad => 0x95, 0xae => 0xe4,
    0xaf => 0x79, 0xb0 => 0xe7, 0xb1 => 0xc8, 0xb2 => 0x37, 0xb3 => 0x6d,
    0xb4 => 0x8d, 0xb5 => 0xd5, 0xb6 => 0x4e, 0xb7 => 0xa9, 0xb8 => 0x6c,
    0xb9 => 0x56, 0xba => 0xf4, 0xbb => 0xea, 0xbc => 0x65, 0xbd => 0x7a,
    0xbe => 0xae, 0xbf => 0x08, 0xc0 => 0xba, 0xc1 => 0x78, 0xc2 => 0x25,
    0xc3 => 0x2e, 0xc4 => 0x1c, 0xc5 => 0xa6, 0xc6 => 0xb4, 0xc7 => 0xc6,
    0xc8 => 0xe8, 0xc9 => 0xdd, 0xca => 0x74, 0xcb => 0x1f, 0xcc => 0x4b,
    0xcd => 0xbd, 0xce => 0x8b, 0xcf => 0x8a, 0xd0 => 0x70, 0xd1 => 0x3e,
    0xd2 => 0xb5, 0xd3 => 0x66, 0xd4 => 0x48, 0xd5 => 0x03, 0xd6 => 0xf6,
    0xd7 => 0x0e, 0xd8 => 0x61, 0xd9 => 0x35, 0xda => 0x57, 0xdb => 0xb9,
    0xdc => 0x86, 0xdd => 0xc1, 0xde => 0x1d, 0xdf => 0x9e, 0xe0 => 0xe1,
    0xe1 => 0xf8, 0xe2 => 0x98, 0xe3 => 0x11, 0xe4 => 0x69, 0xe5 => 0xd9,
    0xe6 => 0x8e, 0xe7 => 0x94, 0xe8 => 0x9b, 0xe9 => 0x1e, 0xea => 0x87,
    0xeb => 0xe9, 0xec => 0xce, 0xed => 0x55, 0xee => 0x28, 0xef => 0xdf,
    0xf0 => 0x8c, 0xf1 => 0xa1, 0xf2 => 0x89, 0xf3 => 0x0d, 0xf4 => 0xbf,
    0xf5 => 0xe6, 0xf6 => 0x42, 0xf7 => 0x68, 0xf8 => 0x41, 0xf9 => 0x99,
    0xfa => 0x2d, 0xfb => 0x0f, 0xfc => 0xb0, 0xfd => 0x54, 0xfe => 0xbb,
    0xff => 0x16
  }
}

/* Easy function to perform an inverse AES SBox operation on 1 byte. */
val aes_sbox_inv : bits(8) -> bits(8)
function aes_sbox_inv(x) = {
  match(x) {
    0x00 => 0x52, 0x01 => 0x09, 0x02 => 0x6a, 0x03 => 0xd5, 0x04 => 0x30,
    0x05 => 0x36, 0x06 => 0xa5, 0x07 => 0x38, 0x08 => 0xbf, 0x09 => 0x40,
    0x0a => 0xa3, 0x0b => 0x9e, 0x0c => 0x81, 0x0d => 0xf3, 0x0e => 0xd7,
    0x0f => 0xfb, 0x10 => 0x7c, 0x11 => 0xe3, 0x12 => 0x39, 0x13 => 0x82,
    0x14 => 0x9b, 0x15 => 0x2f, 0x16 => 0xff, 0x17 => 0x87, 0x18 => 0x34,
    0x19 => 0x8e, 0x1a => 0x43, 0x1b => 0x44, 0x1c => 0xc4, 0x1d => 0xde,
    0x1e => 0xe9, 0x1f => 0xcb, 0x20 => 0x54, 0x21 => 0x7b, 0x22 => 0x94,
    0x23 => 0x32, 0x24 => 0xa6, 0x25 => 0xc2, 0x26 => 0x23, 0x27 => 0x3d,
    0x28 => 0xee, 0x29 => 0x4c, 0x2a => 0x95, 0x2b => 0x0b, 0x2c => 0x42,
    0x2d => 0xfa, 0x2e => 0xc3, 0x2f => 0x4e, 0x30 => 0x08, 0x31 => 0x2e,
    0x32 => 0xa1, 0x33 => 0x66, 0x34 => 0x28, 0x35 => 0xd9, 0x36 => 0x24,
    0x37 => 0xb2, 0x38 => 0x76, 0x39 => 0x5b, 0x3a => 0xa2, 0x3b => 0x49,
    0x3c => 0x6d, 0x3d => 0x8b, 0x3e => 0xd1, 0x3f => 0x25, 0x40 => 0x72,
    0x41 => 0xf8, 0x42 => 0xf6, 0x43 => 0x64, 0x44 => 0x86, 0x45 => 0x68,
    0x46 => 0x98, 0x47 => 0x16, 0x48 => 0xd4, 0x49 => 0xa4, 0x4a => 0x5c,
    0x4b => 0xcc, 0x4c => 0x5d, 0x4d => 0x65, 0x4e => 0xb6, 0x4f => 0x92,
    0x50 => 0x6c, 0x51 => 0x70, 0x52 => 0x48, 0x53 => 0x50, 0x54 => 0xfd,
    0x55 => 0xed, 0x56 => 0xb9, 0x57 => 0xda, 0x58 => 0x5e, 0x59 => 0x15,
    0x5a => 0x46, 0x5b => 0x57, 0x5c => 0xa7, 0x5d => 0x8d, 0x5e => 0x9d,
    0x5f => 0x84, 0x60 => 0x90, 0x61 => 0xd8, 0x62 => 0xab, 0x63 => 0x00,
    0x64 => 0x8c, 0x65 => 0xbc, 0x66 => 0xd3, 0x67 => 0x0a, 0x68 => 0xf7,
    0x69 => 0xe4, 0x6a => 0x58, 0x6b => 0x05, 0x6c => 0xb8, 0x6d => 0xb3,
    0x6e => 0x45, 0x6f => 0x06, 0x70 => 0xd0, 0x71 => 0x2c, 0x72 => 0x1e,
    0x73 => 0x8f, 0x74 => 0xca, 0x75 => 0x3f, 0x76 => 0x0f, 0x77 => 0x02,
    0x78 => 0xc1, 0x79 => 0xaf, 0x7a => 0xbd, 0x7b => 0x03, 0x7c => 0x01,
    0x7d => 0x13, 0x7e => 0x8a, 0x7f => 0x6b, 0x80 => 0x3a, 0x81 => 0x91,
    0x82 => 0x11, 0x83 => 0x41, 0x84 => 0x4f, 0x85 => 0x67, 0x86 => 0xdc,
    0x87 => 0xea, 0x88 => 0x97, 0x89 => 0xf2, 0x8a => 0xcf, 0x8b => 0xce,
    0x8c => 0xf0, 0x8d => 0xb4, 0x8e => 0xe6, 0x8f => 0x73, 0x90 => 0x96,
    0x91 => 0xac, 0x92 => 0x74, 0x93 => 0x22, 0x94 => 0xe7, 0x95 => 0xad,
    0x96 => 0x35, 0x97 => 0x85, 0x98 => 0xe2, 0x99 => 0xf9, 0x9a => 0x37,
    0x9b => 0xe8, 0x9c => 0x1c, 0x9d => 0x75, 0x9e => 0xdf, 0x9f => 0x6e,
    0xa0 => 0x47, 0xa1 => 0xf1, 0xa2 => 0x1a, 0xa3 => 0x71, 0xa4 => 0x1d,
    0xa5 => 0x29, 0xa6 => 0xc5, 0xa7 => 0x89, 0xa8 => 0x6f, 0xa9 => 0xb7,
    0xaa => 0x62, 0xab => 0x0e, 0xac => 0xaa, 0xad => 0x18, 0xae => 0xbe,
    0xaf => 0x1b, 0xb0 => 0xfc, 0xb1 => 0x56, 0xb2 => 0x3e, 0xb3 => 0x4b,
    0xb4 => 0xc6, 0xb5 => 0xd2, 0xb6 => 0x79, 0xb7 => 0x20, 0xb8 => 0x9a,
    0xb9 => 0xdb, 0xba => 0xc0, 0xbb => 0xfe, 0xbc => 0x78, 0xbd => 0xcd,
    0xbe => 0x5a, 0xbf => 0xf4, 0xc0 => 0x1f, 0xc1 => 0xdd, 0xc2 => 0xa8,
    0xc3 => 0x33, 0xc4 => 0x88, 0xc5 => 0x07, 0xc6 => 0xc7, 0xc7 => 0x31,
    0xc8 => 0xb1, 0xc9 => 0x12, 0xca => 0x10, 0xcb => 0x59, 0xcc => 0x27,
    0xcd => 0x80, 0xce => 0xec, 0xcf => 0x5f, 0xd0 => 0x60, 0xd1 => 0x51,
    0xd2 => 0x7f, 0xd3 => 0xa9, 0xd4 => 0x19, 0xd5 => 0xb5, 0xd6 => 0x4a,
    0xd7 => 0x0d, 0xd8 => 0x2d, 0xd9 => 0xe5, 0xda => 0x7a, 0xdb => 0x9f,
    0xdc => 0x93, 0xdd => 0xc9, 0xde => 0x9c, 0xdf => 0xef, 0xe0 => 0xa0,
    0xe1 => 0xe0, 0xe2 => 0x3b, 0xe3 => 0x4d, 0xe4 => 0xae, 0xe5 => 0x2a,
    0xe6 => 0xf5, 0xe7 => 0xb0, 0xe8 => 0xc8, 0xe9 => 0xeb, 0xea => 0xbb,
    0xeb => 0x3c, 0xec => 0x83, 0xed => 0x53, 0xee => 0x99, 0xef => 0x61,
    0xf0 => 0x17, 0xf1 => 0x2b, 0xf2 => 0x04, 0xf3 => 0x7e, 0xf4 => 0xba,
    0xf5 => 0x77, 0xf6 => 0xd6, 0xf7 => 0x26, 0xf8 => 0xe1, 0xf9 => 0x69,
    0xfa => 0x14, 0xfb => 0x63, 0xfc => 0x55, 0xfd => 0x21, 0xfe => 0x0c,
    0xff => 0x7d
  }
}

/* AES SubWord function used in the key expansion
 * - Applies the forward sbox to each byte in the input word.
 */
val aes_subword_fwd : bits(32) -> bits(32)
function aes_subword_fwd(x) = {
  aes_sbox_fwd(x[31..24]) @
  aes_sbox_fwd(x[23..16]) @
  aes_sbox_fwd(x[15.. 8]) @
  aes_sbox_fwd(x[ 7.. 0])
}

/* AES Inverse SubWord function.
 * - Applies the inverse sbox to each byte in the input word.
 */
val aes_subword_inv : bits(32) -> bits(32)
function aes_subword_inv(x) = {
  aes_sbox_inv(x[31..24]) @
  aes_sbox_inv(x[23..16]) @
  aes_sbox_inv(x[15.. 8]) @
  aes_sbox_inv(x[ 7.. 0]) 
}

/* Easy function to perform an SM4 SBox operation on 1 byte. */
val sm4_sbox : bits(8) -> bits(8)
function sm4_sbox(x) = {
 sbox_lookup(x, sm4_sbox_table)
}

val aes_get_column : (bits(128), nat) -> bits(32)
function aes_get_column(state,c) = {
 (state >> (to_bits(7,32*c)))[31..0]
}

/* 64-bit to 64-bit function which applies the AES forward sbox to each byte
 * in a 64-bit word.
 */
val aes_apply_fwd_sbox_to_each_byte : bits(64) -> bits(64)
function aes_apply_fwd_sbox_to_each_byte(x) = {
  aes_sbox_fwd(x[63..56]) @
  aes_sbox_fwd(x[55..48]) @
  aes_sbox_fwd(x[47..40]) @
  aes_sbox_fwd(x[39..32]) @
  aes_sbox_fwd(x[31..24]) @
  aes_sbox_fwd(x[23..16]) @
  aes_sbox_fwd(x[15.. 8]) @
  aes_sbox_fwd(x[ 7.. 0])
}

/* 64-bit to 64-bit function which applies the AES inverse sbox to each byte
 * in a 64-bit word. 
 */
val aes_apply_inv_sbox_to_each_byte : bits(64) -> bits(64)
function aes_apply_inv_sbox_to_each_byte(x) = {
  aes_sbox_inv(x[63..56]) @
  aes_sbox_inv(x[55..48]) @
  aes_sbox_inv(x[47..40]) @
  aes_sbox_inv(x[39..32]) @
  aes_sbox_inv(x[31..24]) @
  aes_sbox_inv(x[23..16]) @
  aes_sbox_inv(x[15.. 8]) @
  aes_sbox_inv(x[ 7.. 0])
}

/*
 * AES full-round transformation functions.
 */

val getbyte : (bits(64), int) -> bits(8)
function getbyte(x, i) = {
  (x >> to_bits(6,i*8))[7..0]
}

val aes_rv64_shiftrows_fwd : (bits(64), bits(64)) -> bits(64)
function aes_rv64_shiftrows_fwd(rs2, rs1) = {
  getbyte(rs1, 3) @
  getbyte(rs2, 6) @
  getbyte(rs2, 1) @
  getbyte(rs1, 4) @
  getbyte(rs2, 7) @
  getbyte(rs2, 2) @
  getbyte(rs1, 5) @
  getbyte(rs1, 0)
}

val aes_rv64_shiftrows_inv : (bits(64), bits(64)) -> bits(64)
function aes_rv64_shiftrows_inv(rs2, rs1) = {
  getbyte(rs2, 3) @
  getbyte(rs2, 6) @
  getbyte(rs1, 1) @
  getbyte(rs1, 4) @
  getbyte(rs1, 7) @
  getbyte(rs2, 2) @
  getbyte(rs2, 5) @
  getbyte(rs1, 0)
}

/* 128-bit to 128-bit implementation of the forward AES ShiftRows transform. 
 * Byte 0 of state is input column 0, bits  7..0.
 * Byte 5 of state is input column 1, bits 15..8.
 */
val aes_shift_rows_fwd : bits(128) -> bits(128)
function aes_shift_rows_fwd(x) = {
  let ic3 : bits(32) = aes_get_column(x, 3); 
  let ic2 : bits(32) = aes_get_column(x, 2); 
  let ic1 : bits(32) = aes_get_column(x, 1); 
  let ic0 : bits(32) = aes_get_column(x, 0); 
  let oc0 : bits(32) = ic0[31..24] @ ic1[23..16] @ ic2[15.. 8] @ ic3[ 7.. 0];
  let oc1 : bits(32) = ic1[31..24] @ ic2[23..16] @ ic3[15.. 8] @ ic0[ 7.. 0];
  let oc2 : bits(32) = ic2[31..24] @ ic3[23..16] @ ic0[15.. 8] @ ic1[ 7.. 0];
  let oc3 : bits(32) = ic3[31..24] @ ic0[23..16] @ ic1[15.. 8] @ ic2[ 7.. 0];
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}

/* 128-bit to 128-bit implementation of the inverse AES ShiftRows transform.
 * Byte 0 of state is input column 0, bits  7..0.
 * Byte 5 of state is input column 1, bits 15..8.
 */
val aes_shift_rows_inv : bits(128) -> bits(128)
function aes_shift_rows_inv(x) = {
  let ic3 : bits(32) = aes_get_column(x, 3); /* In column 3 */
  let ic2 : bits(32) = aes_get_column(x, 2); 
  let ic1 : bits(32) = aes_get_column(x, 1); 
  let ic0 : bits(32) = aes_get_column(x, 0); 
  let oc0 : bits(32) = ic0[31..24] @ ic3[23..16] @ ic2[15.. 8] @ ic1[ 7.. 0];
  let oc1 : bits(32) = ic1[31..24] @ ic0[23..16] @ ic3[15.. 8] @ ic2[ 7.. 0];
  let oc2 : bits(32) = ic2[31..24] @ ic1[23..16] @ ic0[15.. 8] @ ic3[ 7.. 0];
  let oc3 : bits(32) = ic3[31..24] @ ic2[23..16] @ ic1[15.. 8] @ ic0[ 7.. 0];
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}

/* Applies the forward sub-bytes step of AES to a 128-bit vector
 * representation of its state.
 */
val aes_subbytes_fwd : bits(128) -> bits(128)
function aes_subbytes_fwd(x) = {
  let oc0 : bits(32) = aes_subword_fwd(aes_get_column(x, 0));
  let oc1 : bits(32) = aes_subword_fwd(aes_get_column(x, 1));
  let oc2 : bits(32) = aes_subword_fwd(aes_get_column(x, 2));
  let oc3 : bits(32) = aes_subword_fwd(aes_get_column(x, 3));
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}

/* Applies the inverse sub-bytes step of AES to a 128-bit vector
 * representation of its state.
 */
val aes_subbytes_inv : bits(128) -> bits(128)
function aes_subbytes_inv(x) = {
  let oc0 : bits(32) = aes_subword_inv(aes_get_column(x, 0));
  let oc1 : bits(32) = aes_subword_inv(aes_get_column(x, 1));
  let oc2 : bits(32) = aes_subword_inv(aes_get_column(x, 2));
  let oc3 : bits(32) = aes_subword_inv(aes_get_column(x, 3));
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}

/* Applies the forward MixColumns step of AES to a 128-bit vector
 * representation of its state.
 */
val aes_mixcolumns_fwd : bits(128) -> bits(128)
function aes_mixcolumns_fwd(x) = {
  let oc0 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 0));
  let oc1 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 1));
  let oc2 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 2));
  let oc3 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 3));
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}

/* Applies the inverse MixColumns step of AES to a 128-bit vector
 * representation of its state.
 */
val aes_mixcolumns_inv : bits(128) -> bits(128)
function aes_mixcolumns_inv(x) = {
  let oc0 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 0));
  let oc1 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 1));
  let oc2 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 2));
  let oc3 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 3));
  (oc3 @ oc2 @ oc1 @ oc0) /* Return value */
}
