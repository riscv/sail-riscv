/*=======================================================================================*/
/*  This Sail RISC-V architecture model, comprising all files and                        */
/*  directories except where otherwise noted is subject the BSD                          */
/*  two-clause license in https://github.com/riscv/sail-riscv/blob/master/LICENCE.       */
/*                                                                                       */
/*  SPDX-License-Identifier: BSD-2-Clause                                                */
/*  This file is generated by make_td tool as part of Tristan Project                    */
/*=======================================================================================*/


enum clause extension = Ext_Zilsd
function clause extensionEnabled(Ext_Zilsd) = xlen == 32 & sys_enable_zilsd()

union clause ast = ZILSD_LD : (bits(12), regidx, regidx)

mapping clause encdec = ZILSD_LD(i11_0, rs1, rd)
	if extensionEnabled(Ext_Zilsd) & xlen == 32
<-> i11_0 : bits(12) @ encdec_reg(rs1) @ 0b011 @ encdec_reg(rd) @ 0b0000011
	if extensionEnabled(Ext_Zilsd) & xlen == 32

function clause execute(ZILSD_LD(imm, rs1, rd)) = {
	let offset : xlenbits = sign_extend(imm);
	let vaddr = X(rs1) + offset;
	if xlen == 32 then
	if check_misaligned(virtaddr(vaddr), DOUBLE)
	then {handle_mem_exception(virtaddr(vaddr), E_Load_Addr_Align()); RETIRE_FAIL}
	else match translateAddr(virtaddr(vaddr), Read(Data)) {
	TR_Failure(e, _) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
	TR_Address(paddr, _) =>
		match mem_read(Read(Data), paddr, 4, false, false, false) {
		Ok(result) => {
			match translateAddr(virtaddr(vaddr+4), Read(Data)) {
			TR_Failure(e, _) => {handle_mem_exception(virtaddr(vaddr+4), e); RETIRE_FAIL},
			TR_Address(paddr_4, _) =>
				match mem_read(Read(Data), paddr_4, 4, false, false, false) {
				Ok(result1) => {
				    if encdec_reg(rd) != zeros() then {
					X(rd) = sign_extend(result);
					X(regidx_offset(rd, to_bits(5, 1))) = sign_extend(result1);
					};
					RETIRE_SUCCESS
				},
				Err(e) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
			}
		}
	},
	Err(e) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
	},
}
	else RETIRE_FAIL
}

mapping clause assembly = ZILSD_LD(imm, rs1, rd)
	if extensionEnabled(Ext_Zilsd) & xlen == 32
<-> "ld" ^ spc() ^ reg_name(rs1) ^ sep() ^ reg_name(rd) ^ sep() ^ hex_bits_12(imm)
	if extensionEnabled(Ext_Zilsd) & xlen == 32

union clause ast = ZILSD_SD : (bits(12), regidx, regidx)

mapping clause encdec = ZILSD_SD(i11_5 @ i4_0, rs2, rs1)
	if extensionEnabled(Ext_Zilsd) & xlen == 32
<-> i11_5 : bits(7) @ encdec_reg(rs2) @ encdec_reg(rs1) @ 0b011 @ i4_0 : bits(5) @ 0b0100011
	if extensionEnabled(Ext_Zilsd) & xlen == 32

function clause execute(ZILSD_SD(imm, rs2, rs1)) = {
	let offset : xlenbits = sign_extend(imm);
	let vaddr = X(rs1) + offset;
	if xlen == 32 then
	if check_misaligned(virtaddr(vaddr), DOUBLE)
	then {handle_mem_exception(virtaddr(vaddr), E_SAMO_Addr_Align()); RETIRE_FAIL}
	else match translateAddr(virtaddr(vaddr), Read(Data)) {
	TR_Failure(e, _) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
	TR_Address(paddr, _) =>
		match mem_write_ea(paddr, 4, false, false, false) {
		Ok(_) => {
			let result : MemoryOpResult(bool) = mem_write_value(paddr, 4, X(rs2), false, false, false) in
			match result {
				Ok(true) =>{
				match translateAddr(virtaddr(vaddr+4), Write(Data)) {
				TR_Failure(e, _) => {handle_mem_exception(virtaddr(vaddr+4), e); RETIRE_FAIL},
				TR_Address(paddr_4, _) =>
					match mem_write_ea(paddr_4, 4, false, false, false) {
						Ok(_) => {
							let value : xlenbits = if encdec_reg(rs2) == zeros() then zeros() else X(regidx_offset(rs2, to_bits(5,1))) in
							let result1 : MemoryOpResult(bool) = mem_write_value(paddr_4, 4, value, false, false, false) in
							match result1 {
								Ok(true) => {RETIRE_SUCCESS},
								Ok(false) => {internal_error(__FILE__, __LINE__, "sd failed")},
								Err(e) => {handle_mem_exception(virtaddr(vaddr+4), e); RETIRE_FAIL},
							}
					},
				Err(e) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
				}
			}
			},
			Ok(false) => {internal_error(__FILE__, __LINE__, "sd failed")},
			Err(e) => {handle_mem_exception(virtaddr(vaddr+4), e); RETIRE_FAIL},
			}
		},
		Err(e) => {handle_mem_exception(virtaddr(vaddr), e); RETIRE_FAIL},
		},
	}
	else RETIRE_FAIL
}

mapping clause assembly = ZILSD_SD(imm, rs2, rs1)
	if extensionEnabled(Ext_Zilsd) & xlen == 32
<-> "sd" ^ spc() ^ reg_name(rs2) ^ sep() ^ reg_name(rs1) ^ sep() ^ hex_bits_12(imm)
	if extensionEnabled(Ext_Zilsd) & xlen == 32

